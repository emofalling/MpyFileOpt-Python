import mpyfopt,os,traceback
os.chdir(os.path.dirname(os.path.abspath(__file__)))
opt = mpyfopt.MpyFileOpt("COM3", timeout=5, verbose=True)
print("Read version")
print("v{}.{}".format(*opt.get_source_version(verbose=True)))
print("Get uname")
print(opt.uname(verbose=True))
print("Get unique id")
print(opt.get_uid(verbose=True))
print("Get freq")
print(opt.get_freq(verbose=True))
print("Start to chdir to /lib")
opt.chdir("/lib", verbose=True)
print("Start to getcwd")
print(opt.getcwd(verbose=True))
print("Start to list dir /")
print(opt.listdir("/lib", False, verbose=True))
print("Start to ilist dir /lib")
print(opt.ilistdir("/lib", False, verbose=True))
print("Start to write file /test.txt from ./wtest.txt")
def read_write_callback(total, cur):
    print(f"{cur}/{total}  {cur/total*100:.2f}%")
with open("./wtest.txt", "rb") as f:
    try:opt.upload("/test.txt", f, os.path.getsize("./wtest.txt"), 4096, read_write_callback, verbose=True)
    except Exception as e: print(traceback.format_exc())
print("Start to read file /test.txt to ./rtest.txt")
with open("./rtest.txt", "wb") as f:
    try:opt.download("/test.txt", f, 4096, read_write_callback, verbose=True)
    except Exception as e: print(traceback.format_exc())
print("Start to mkdir /testdir")
opt.mkdir("/testdir", verbose=True)
print("Start to rename /test.txt to /test.txt.bak")
opt.rename("/test.txt", "/test.txt.bak", verbose=True)
print("Start to list dir /")
print(opt.listdir("/", False, verbose=True))
print("Start to remove /test.txt (Not exists)")
try:opt.remove("/test.txt", verbose=True)
except Exception as e: print(traceback.format_exc())
print("Start to remove /test.txt.bak")
opt.remove("/test.txt.bak", verbose=True)
print("Start to rmdir /testdir")
opt.rmdir("/testdir", verbose=True)
print("Start to list dir /")
print(opt.listdir("/", False, verbose=True))
print("Start to get stat of /lib")
print(opt.stat("/lib", verbose=True))
print("Start to get stat of /main.py")
print(opt.stat("/main.py", verbose=True))
print("Start to get statvfs of /")
print(opt.statvfs("/", verbose=True))
print("Get GC Info")
print(opt.get_gc_info(True, verbose=True))
print("Close")
opt.close(verbose=True)